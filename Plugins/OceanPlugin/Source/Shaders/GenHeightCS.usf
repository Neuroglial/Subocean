#include "/Engine/Public/Platform.ush"

float SizeInWorld;
Texture2D Input;
RWTexture2D<float> Height;

float3 GetPosition(int2 pos,float2 iResolution,int size)
{
	float3 offset = Input[fmod(pos,size)].xyz;
	offset += float3(SizeInWorld*float2(pos)/iResolution,0.0f);
	return offset;
}
float cross(float2 a,float2 b)
{
	return a.x*b.y-a.y*b.x;
}

int PosIsIntriangle(float2 P,float2 A,float2 B,float2 C)
{
	float PAcPB = cross(A-P,B-P);
	float PBcPC = cross(B-P,C-P);
	float PCcPA = cross(C-P,A-P);

	if(PAcPB>0.0&&PBcPC>0.0&&PCcPA>0.0)
		return 1;
	
	if(PAcPB<0.0&&PBcPC<0.0&&PCcPA<0.0)
		return 1;

	return 0;
}

float GetAvgHeight(float2 Pos,float3 P1,float3 P2,float3 P3,float3 P4)
{
	float3 h1 = lerp(P1,P2,(Pos.x-P1.x)/(P2.x-P1.x));
	float3 h2 = lerp(P3,P4,(Pos.x-P3.x)/(P4.x-P3.x));
	return lerp(h1.z,h2.z,(Pos.y-h1.y)/(h2.y-h1.y));
}

[numthreads(32,32,1)]
void MainCS(uint3 Gid:SV_GroupID,uint3 DTid : SV_DispatchThreadID)
{
	int SizeX,SizeY;
	Input.GetDimensions(SizeX,SizeY);
	float2 iResolution = float2(SizeX,SizeY);

	float3 pos[4];
	pos[0] = GetPosition(DTid.xy,iResolution,SizeX);
	pos[1] = GetPosition(DTid.xy + int2(1,0),iResolution,SizeX);
	pos[2] = GetPosition(DTid.xy + int2(0,1),iResolution,SizeX);
	pos[3] = GetPosition(DTid.xy + int2(1,1),iResolution,SizeX);

	float2 MinPos,MaxPos;

	MinPos.x = min3(pos[0].x,pos[1].x,pos[2].x);
	MinPos.x = min(MinPos.x,pos[3].x);

	MinPos.y = min3(pos[0].y,pos[1].y,pos[2].y);
	MinPos.y = min(MinPos.y,pos[3].y);

	MaxPos.x = max3(pos[0].x,pos[1].x,pos[2].x);
	MaxPos.x = max(MaxPos.x,pos[3].x);

	MaxPos.y = max3(pos[0].y,pos[1].y,pos[2].y);
	MaxPos.y = max(MaxPos.y,pos[3].y);

	MinPos *= iResolution/SizeInWorld;
	MaxPos *= iResolution/SizeInWorld;

	int2 MinPosInt2 = ceil(MinPos);
	int2 MaxPosInt2 = floor(MaxPos);

	float2 OutPos;
	int In;

	for(int i = MinPosInt2.x;i<=MaxPosInt2.x;i++)
	{
		for(int j = MinPosInt2.y;j<=MaxPosInt2.y;j++)
		{
			OutPos = SizeInWorld*float2(i,j)/iResolution;
			In = PosIsIntriangle(OutPos,pos[0],pos[1],pos[3]) + PosIsIntriangle(OutPos,pos[0],pos[3],pos[2]);

			if(In)
			{
				Height[fmod(int2(i+SizeX,j+SizeX),SizeX)] = GetAvgHeight(OutPos,pos[0],pos[1],pos[2],pos[3]);
			}
		}
	}
}